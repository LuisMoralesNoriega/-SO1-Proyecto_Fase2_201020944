/* Generated By:JavaCC: Do not edit this line. AnalizadorS.java */
package Analizador;
import Estructuras.*;

public class AnalizadorS implements AnalizadorSConstants {

  static final public void Inicio() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMU:
      jj_consume_token(SIMU);
      jj_consume_token(19);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RECURSO:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Recursos();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TIEMPO:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        Tiempos();
      }
      jj_consume_token(20);
      break;
    case EJEC:
      jj_consume_token(EJEC);
      jj_consume_token(19);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROC:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        Ejecuciones();
      }
      jj_consume_token(20);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Recursos() throws ParseException {
                  Token n;
    jj_consume_token(RECURSO);
    jj_consume_token(21);
    n = jj_consume_token(CONSTANT);
    jj_consume_token(22);
          Recurso re = new Recurso(Integer.parseInt(n.image));
          Listas.Lrecursos.add(re);
  }

  static final public void Tiempos() throws ParseException {
                   Token n; Proceso p; Tiempo ti = new Tiempo();
    jj_consume_token(TIEMPO);
    jj_consume_token(23);
    n = jj_consume_token(CONSTANT);
    jj_consume_token(24);
    jj_consume_token(19);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROC:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      p = Procesos();
                             ti.Lprocesos.add(p);
    }
    jj_consume_token(20);
                                                                  ti.id = Integer.parseInt(n.image);
                                                                                                  Listas.Ltiempos.add(ti);
  }

  static final public Proceso Procesos() throws ParseException {
                       Token n; Proceso p = new Proceso(); Accion a = new Accion();
    jj_consume_token(PROC);
    jj_consume_token(23);
    n = jj_consume_token(CONSTANT);
    jj_consume_token(24);
    jj_consume_token(19);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASIG:
      case LIBE:
      case TERMI:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      a = Acciones();
                              p.Lacciones.add(a);
    }
    jj_consume_token(20);
          p.id = Integer.parseInt(n.image);
          {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  static final public Accion Acciones() throws ParseException {
                     Token n; Accion a = new Accion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIG:
      jj_consume_token(ASIG);
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        n = jj_consume_token(CONSTANT);
                                                a.id = 1; a.Lrecursos.add(Integer.parseInt(n.image));
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 25:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_6;
          }
          jj_consume_token(25);
          jj_consume_token(21);
          n = jj_consume_token(CONSTANT);
                                                                                                                                    a.id = 1; a.Lrecursos.add(Integer.parseInt(n.image));
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(24);
      jj_consume_token(22);
      break;
    case LIBE:
      jj_consume_token(LIBE);
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 21:
        jj_consume_token(21);
        n = jj_consume_token(CONSTANT);
                                                a.id = 2; a.Lrecursos.add(Integer.parseInt(n.image));
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 25:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_7;
          }
          jj_consume_token(25);
          jj_consume_token(21);
          n = jj_consume_token(CONSTANT);
                                                                                                                                    a.id = 2; a.Lrecursos.add(Integer.parseInt(n.image));
        }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(24);
      jj_consume_token(22);
      break;
    case TERMI:
      jj_consume_token(TERMI);
      jj_consume_token(23);
      jj_consume_token(24);
      jj_consume_token(22);
                                 a.id = 3;
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  static final public void Ejecuciones() throws ParseException {
    jj_consume_token(PROC);
    jj_consume_token(23);
    jj_consume_token(CONSTANT);
    jj_consume_token(25);
    jj_consume_token(CONSTANT);
    jj_consume_token(25);
    jj_consume_token(CONSTANT);
    jj_consume_token(25);
    jj_consume_token(CONSTANT);
    jj_consume_token(24);
    jj_consume_token(22);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalizadorSTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x100,0x200,0x60,0x200,0x1c00,0x2000000,0x200000,0x2000000,0x200000,0x1c00,};
   }

  /** Constructor with InputStream. */
  public AnalizadorS(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorS(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorS(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorS(AnalizadorSTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
